import urllib.request
import requests
from bs4 import *




def mot(mot):
    return mot


def entree():

    det1 = {"roue":1,
            "carburant":1,
            "vivant":1,
            "mammifère":1
            }

    return det1

def base_donnée():

    data = {"automobile":4,
            "chat":-4,
            "chien":-4,
            "camionette":4,
            "moto":4,
            "raton":-4,
            "camion":4,
            "voiture électrique":2,
            "fourmis":-2
            }        

    return data


def nos_poids():
    un = 2
    deux = 2
    trois = -2
    quattre = -2

    return un, deux, trois, quattre

DICO_E = {}
def remplissage_dico_e(liste):
    for i in liste:
        DICO_E[i] = 0

DICO_ABS = {}
def remplissage_dico_e_abs(liste):
    for i in liste:
        DICO_ABS[i] = 0


class activation:

   
    def recherche(self, mot):
        self.mot = mot

        liste = []
        path = "https://fr.wikipedia.org/wiki/{}".format(self.mot)
        
        requete = requests.get(path)
        page = requete.content
        
        soup = BeautifulSoup(page, "html.parser")
        liste.append(soup)

        return liste


    def traitement_liste(self, liste):
        dico = entree()

        dico_poids = {}

        for i in dico:
            dico_poids[i] = 0
        
        for i in dico.keys():
        
            recherche = str(liste).find(str(i))
            if recherche >= 0:
                dico_poids[i] += 1
           
        
        return dico_poids



    def calcul_poids(self, dico_recherche):

        sortie = 0

        entre = entree()
        poids = nos_poids()

        c=0
        for i in dico_recherche.values():
           
            poid = i * poids[c]
            sortie += poid
            
            c+=1

        return sortie


    def conclusion(self, sortie, i):
        
        if sortie > 0 :
            print(i + " nest pas vivant")
        else:
            print(i + " est vivant")





if __name__ == "__main__":

    liste = ["automobile","chat","chien","fourmis",
             "camionette","moto", "raton","camion", "voiture électrique"]

    liste3 = []
    
    activation = activation()
    remplissage_dico_e(liste)
    remplissage_dico_e_abs(liste)


    for i in liste:
        
        liste1 = activation.recherche(i)
        liste2 = activation.traitement_liste(liste1)
        sortie = activation.calcul_poids(liste2)
        activation.conclusion(sortie, i)


 



    

















