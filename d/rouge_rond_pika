import cv2
import numpy as np
from PIL import Image, ImageTk
import argparse
import sys
import imutils
from pylab import *
import sys, cv2



def nettoyage_image_outils(image, nom, c1, c2, c3):
    
    image = cv2.imread(image)
    for x in range(image.shape[0]):
        for y in range(image.shape[1]):
            image[x,y] = c1, c2, c3


    cv2.imwrite(nom, image)

    
def extraction_rose(image):
    image = cv2.imread(image)

    liste_rond = []

    for x in range(image.shape[0]):
        for y in range(image.shape[1]):
            
            if image[x,y][2] >= image[x,y][1] + 50 and\
               image[x,y][2] >= 150 and\
               image[x,y][1] <= 160 and\
               image[x,y][1] >= 50 and\
               image[x,y][0] >= 50 and\
               image[x,y][0] <= 145 and\
               image[x,y][2] >= image[x,y][0] + 50 or\
               image[x,y][2] >= 200 and\
               image[x,y][0] <= 50 and\
               image[x,y][1] <= 50 or\
               image[x,y][2] >= 200 and\
               image[x,y][1] <= 48 and\
               image[x,y][0] <= 55 or\
               image[x,y][2] >= 200 and\
               image[x,y][1] <= 32 and\
               image[x,y][0] <= 57 or\
               image[x,y][0] <= 130 and\
               image[x,y][1] <= 70 and\
               image[x,y][2] >= 200 or\
               image[x,y][0] <= 49 and\
               image[x,y][1] <= 90 and\
               image[x,y][2] >= 230 or\
               image[x,y][0] <= 45 and\
               image[x,y][1] <= 53 and\
               image[x,y][2] >= 160 and\
               image[x,y][2] > image[x,y][0] + 100 and\
               image[x,y][2] > image[x,y][1] + 100 or\
               image[x,y][0] <= 50 and\
               image[x,y][1] <= 60 and\
               image[x,y][2] >= 160 or\
               image[x,y][0] <= 45 and\
               image[x,y][1] <= 50 and\
               image[x,y][2] >= 150 or\
               image[x,y][0] <= 25 and\
               image[x,y][1] <= 70 and\
               image[x,y][2] >= 150 or\
               image[x,y][0] <= 30 and\
               image[x,y][1] <= 90 and\
               image[x,y][2] >= 160 and\
               image[x,y][2] > image[x,y][1] + 60 and\
               image[x,y][2] > image[x,y][0] + 140 or\
               image[x,y][0] <= 30 and\
               image[x,y][1] <= 90 and\
               image[x,y][2] >= 160 or\
               image[x,y][0] <= 50 and\
               image[x,y][1] <= 60 and\
               image[x,y][2] >= 130 or\
               image[x,y][0] <= 10 and\
               image[x,y][1] <= 45 and\
               image[x,y][2] >= 120:

                liste_rond.append((x,y))

    return liste_rond


def nettoyage1(liste):

    liste1 = []
    c = 0
    for i in liste[:-2]:
        if i[1] + 1 == liste[c+1][1]:
            liste1.append(i)  
        c+=1

    return liste1


def nettoyage2(liste):
 
    liste2 = []
    c = 0
    for i in liste[:-2]:
        if i[1] + 1 == liste[c+1][1] and\
           i[0] == liste[c+1][0]:
            liste2.append(i)
        c+=1

    return liste2


def nettoyage3(liste2):

    b = [[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],
         [],[],[],[],[],[],[],[],[],[],[],[],[]]

    liste3 = []

    c = 0
    d = 0

    for i in liste2[:-2]:
     
        if i[0] == liste2[c + 1][0] and\
           i[1] + 1 == liste2[c + 1][1]:
            b[d].append(i)
        else:
            d+=1
        
        c+=1

    y = []
    for i in b:
        if i == []:
            pass
        else:
            if len(i) <= 9:
                pass
            else:
                y.append(i)
    print(y)
    return y

def nettoyage4(y):

    c = 0
    d = 0
    yy = []
    aze = []

    for i in y:
        for j in i:
            yy.append(j)

        c+=1
        
    for i in yy:
        aze.append(i[1])
            
    aze = set(aze)
    aze = list(aze)
    aze.sort()

    image = cv2.imread('rond2.png')
    
    yoo = [[],[],[]]

    c=0
    d =0
    for i in aze:
        try:
            if i + 1 != aze[c + 1]:
                d+=1
            else:
                yoo[d].append(i)
        except:
            pass
        c+=1

    oo = []
    a = ""

    for i in yy:
        a = ""
        for j in yoo[1]:
            if j == i[1]:
                a = True

        if a == True:
            pass
        else:
            image[i[0],i[1]] = 255,255,255

    cv2.imwrite("image_rond_pika.png", image)


def contour():
    
    raw_image = cv2.imread("image_rond_pika.png")

    bilateral_filtered_image = cv2.bilateralFilter(raw_image, 5, 175, 175)
    edge_detected_image = cv2.Canny(bilateral_filtered_image, 75, 200)
    _, contours, hierarchy = cv2.findContours(edge_detected_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    contour_list = []
    for contour in contours:
        approx = cv2.approxPolyDP(contour,0.01*cv2.arcLength(contour,True),True)
        area = cv2.contourArea(contour)
        if ((len(approx) > 8) & (len(approx) < 23) & (area > 30) ):
            contour_list.append(contour)

    cv2.drawContours(raw_image, contour_list,  -1, (0,0,0), 60)

    cv2.imwrite("rond3.png", raw_image)


def detection_rond():
    try:
        img = cv2.imread("rond3.png",0)
        img = cv2.medianBlur(img,5)
        cimg = cv2.cvtColor(img,cv2.COLOR_GRAY2BGR)

        circles = cv2.HoughCircles(img,cv2.HOUGH_GRADIENT,1,80,
                                param1=50,param2=20,minRadius=0,maxRadius=0)

        circles = np.uint16(np.around(circles))

        nombre = 0
        for i in circles:
            for j in i:
                nombre += 1
                
        for i in circles[0,:]:
            # draw the outer circle
            cv2.circle(cimg,(i[0],i[1]),i[2],(0,255,0),2)
            # draw the center of the circle
            cv2.circle(cimg,(i[0],i[1]),2,(0,0,255),3)

            

        cv2.startWindowThread()
        cv2.namedWindow("preview")
        cv2.imshow("preview", cimg)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        return nombre

    except:
        return '0 rond'



if __name__ == "__main__":
    
    nettoyage_image_outils('rond3.png', 'rond3.png', 0,255,0)
    nettoyage_image_outils('rond2.png', 'rond2.png', 0,255,0)
    nettoyage_image_outils('image_rond_pika.png', 'image_rond_pika.png', 0,255,0)


    liste1 = extraction_rose('pikachu1.jpg')
    liste2 = nettoyage1(liste1)
    liste3 = nettoyage2(liste2)
    liste4 = nettoyage3(liste3)
    nettoyage4(liste4)
    contour()
    detection_rond()





















